 
#include <stdio.h>
#include <stdlib.h>

#define BOOL int
#define TRUE 1
#define FALSE 0

typedef struct StackNode
{
    int Pos;
    struct StackNode* Next;
}StackNode;


typedef struct Stack
{
    StackNode* Head;
}Stack;


void InitStack(Stack* pStack)
{
    pStack->Head=NULL;
}

BOOL StackEmpty(Stack stack)
{
    if(stack.Head==NULL)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

void Push(Stack* pStack,int pos)
{
    StackNode* pNode=(StackNode*)malloc(sizeof(StackNode));
    pNode->Pos=pos;
    pNode->Next=pStack->Head;
    pStack->Head=pNode;
}

void Pop(Stack* pStack)
{
    StackNode* pNode=pStack->Head;
    pStack->Head=pNode->Next;
    free(pNode);
}

void DesStack(Stack* pStack)
{
    while(!StackEmpty(*pStack))
    {
        Pop(pStack);
    }
}

typedef struct PathStackNode
{
    int row;
    int col;
    struct PathStackNode* Next;
}PathStackNode;

typedef struct PathStack
{
    PathStackNode* Head;
}PathStack;

void InitPathStack(PathStack* pStack)
{
    pStack->Head=NULL;
}

BOOL PathStackEmpty(PathStack stack)
{
    if(stack.Head==NULL)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

void PushPathStack(PathStack* pStack,int row,int col)
{
    PathStackNode* pNode=(PathStackNode*)malloc(sizeof(PathStackNode));
    pNode->row=row;
    pNode->col=col;
    pNode->Next=pStack->Head;
    pStack->Head=pNode;
}

void PopPathStack(PathStack* pStack)
{
    PathStackNode* pNode=pStack->Head;
    pStack->Head=pNode->Next;
    free(pNode);
}

void DesPathStack(PathStack* pStack)
{
    while(!PathStackEmpty(*pStack))
    {
        PopPathStack(pStack);
    }
}


void PrintPath(int *a,int begin,int col)
{
    int tem=begin;
    PathStack stack;
    InitPathStack(&stack);
    PushPathStack(&stack,tem/col,tem%col);
    //printf("%d %d\n",tem/col,tem%col);
    while(a[tem]!=-1)
    {
        PushPathStack(&stack,a[tem]/col,a[tem]%col);
        //printf("%d %d\n",a[tem]/col,a[tem]%col);
        tem=a[tem];
    }
    while(!PathStackEmpty(stack))
    {
        PathStackNode* pNode=stack.Head;
        printf("%d %d \n",pNode->row,pNode->col);
        PopPathStack(&stack);
    }
    DesPathStack(&stack);
}

void SearchPath(int* a,int row,int col,int begin,int end)
{
    Stack stack;
    InitStack(&stack);
    int *Path=(int*)malloc(sizeof(int)*row*col);
    int *Judge=(int*)malloc(sizeof(int)*row*col);
    int i;
    for(i=0;i<row*col;i++)
    {
        Path[i]=-1;
        Judge[i]=63365;
    }
    Judge[begin]=0;
    Push(&stack,begin);

    while(!StackEmpty(stack))
    {
        StackNode* pNode=stack.Head;
        int tem=pNode->Pos;
        if(tem%col!=0&&a[tem-1]!=0&&(Judge[tem]+1)<Judge[tem-1])
        {
            Judge[tem-1]=Judge[tem]+1;
            Path[tem-1]=tem;
            Push(&stack,tem-1);
        }
        else if((tem-col)>=0&&a[tem-col]!=0&&(Judge[tem]+1)<Judge[tem-col])
        {
            Judge[tem-col]=Judge[tem]+1;
            Path[tem-col]=tem;
            Push(&stack,tem-col);
        }
        else if((tem+1)%col!=0&&a[tem+1]!=0&&(Judge[tem]+1)<Judge[tem+1])
        {
            Judge[tem+1]=Judge[tem]+1;
            Path[tem+1]=tem;
            Push(&stack,tem+1);
        }
        else if((tem+col)<(row*col)&&a[tem+col]!=0&&(Judge[tem]+1)<Judge[tem+col])
        {
            Judge[tem+col]=Judge[tem]+1;
            Path[tem+col]=tem;
            Push(&stack,tem+col);
        }
        else
        {
            Pop(&stack);
        }
    }

    PrintPath(Path,end,col);
    DesStack(&stack);
}



int main()
{
    int row,col;
    scanf("%d",&row);
    scanf("%d",&col);
    int *a=(int*)malloc(sizeof(int)*row*col);
    int i;
    int BeginPos;
    int EndPos;
    for(i=0;i<row*col;i++)
    {
        scanf("%d",&a[i]);
        if(a[i]==3)
        {
            BeginPos=i;
        }
        if(a[i]==4)
        {
            EndPos=i;
        }
    }
    SearchPath(a,row,col,BeginPos,EndPos);


    return 0;
}
